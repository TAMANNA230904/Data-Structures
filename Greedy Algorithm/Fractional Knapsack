Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

class Solution
{
    public:
    static bool cmp(pair<double,Item> a,pair<double,Item> b){
        return a.first>b.first;
    }
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        //vector containing wt val and per unit val 
        vector<pair<double,Item>>  v;
        
        for(int i=0;i<n;i++){
            double perUnitval=(1.0*arr[i].value)/arr[i].weight;
            pair<double,Item> p=make_pair(perUnitval,arr[i]);
            v.push_back(p);
        }
        
        sort(v.begin(),v.end(),cmp);
        double totalVal=0;
        for(int i=0;i<n;i++){
            if(v[i].second.weight>W){
            totalVal+=W*v[i].first;
            W=0;
            }
            else{
               totalVal+=v[i].second.value;
               W=W-v[i].second.weight;
            }
               
           
        }
        return totalVal;
        
    }
        
};
