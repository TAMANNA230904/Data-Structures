Given an array of N integers arr[] where each element represents the maximum length of the jump that can be made forward from that element. This means if arr[i] = x, then we can jump any distance y such that y â‰¤ x.

Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.

Note: Return -1 if you can't reach the end of the array.

class Solution{
  public:
  int solve(int arr[], int n,int index,vector<int> &dp){
      int ans=INT_MAX;
      if(index>=n-1)
      return 0;
      if(arr[0]==0)
      return -1;
      if(dp[index]!=-1)
      return dp[index];
     
      for(int i=index+1;i<=index+arr[index] && i<n;i++){
          int recur=solve(arr,n,i,dp);
          if(recur!=-1)
          ans=min(ans,1+recur);
      }
      
     dp[index] =(ans==INT_MAX) ? -1 : ans;
     return dp[index];

  }
    int minJumps(int arr[], int n){
      vector<int> dp(n,-1);
      return solve(arr,n,0,dp);
  
    }
};
//pointer approach
// Function to return minimum number of jumps to end of array

class Solution{
  public:
    int minJumps(int arr[], int n){
      if(n==1)
      return 0;
      if(arr[0]==0)
      return -1;
      int maxi=0,maxR=0;
      int jumps=0;
      for(int i=0;i<n;i++){
          maxi=max(i+arr[i],maxi);
          if(i==maxR){
              jumps++;
              maxR=maxi;
              if(maxR>=n-1)
              return jumps;
          }
      }
     return -1;
  
    }
};
