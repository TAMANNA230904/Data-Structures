You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

class Solution {
public:
int solvetab(int k,vector<int>& prices){
    int n=prices.size();
    vector<vector<vector<int>>> dp(prices.size()+1,vector<vector<int>>(2,vector<int>(k+1,0)));

    for(int index=n-1;index>=0;index--){
        for(int buy=0;buy<=1;buy++){
            for(int limit=k;limit>=1;limit--){
                int profit=0;
    if(buy){
        profit+=max(-prices[index]+dp[index+1][0][limit],dp[index+1][1][limit]);
    }
    else{
        profit+=max(prices[index]+dp[index+1][1][limit-1],dp[index+1][0][limit]);
    }
     dp[index][buy][limit]=profit;
            }
        }
    }
    return dp[0][1][k];
}

    int maxProfit(int k, vector<int>& prices) {
      return solvetab(k,prices);  
    }
};
