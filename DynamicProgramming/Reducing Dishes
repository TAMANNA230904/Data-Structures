//A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.
//Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its
//satisfaction level i.e. time[i] * satisfaction[i].
//Return the maximum sum of like-time coefficient that the chef can obtain after preparing some amount of dishes.
//Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.

class Solution {
public:
int solve(vector<int>& satisfaction,int index,int time){
    if(index==satisfaction.size())
    return 0;
    int include=time*satisfaction[index]+solve(satisfaction,index+1,time+1);
    int exclude=solve(satisfaction,index+1,time);
    return max(include,exclude);

}
int solveMem(vector<int>& satisfaction,int index,int time, vector<vector<int>> &dp){
    if(index==satisfaction.size())
    return 0;

    if(dp[index][time]!=-1)
    return dp[index][time];
    int include=time*satisfaction[index]+solveMem(satisfaction,index+1,time+1,dp);
    int exclude=solveMem(satisfaction,index+1,time,dp);
    dp[index][time]=max(include,exclude);
    return dp[index][time];

}


    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        // return solve(satisfaction,0,1);
        int n=satisfaction.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        return solveMem(satisfaction,0,1,dp);
    }
};



