Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

 class Solution {
public:
//Memoization Bottom-up
bool solve(string &s, string &p,int i,int j,vector<vector<int>> &dp){
    if(i<0 && j<0)
    return true;
    if(i>=0 &&  j<0)
    return false;
    if(i<0 && j>=0){
        for(int k=0;k<=j;k++){
            if(p[k]!='*')
            return false;
        }
        return true;
    }
    if(dp[i][j]!=-1)
    return dp[i][j];
if(s[i]==p[j] || p[j]=='?')
     dp[i][j]= solve(s,p,i-1,j-1,dp);
else if(p[j]=='*')
     dp[i][j] =(solve(s,p,i,j-1,dp) || solve(s,p,i-1,j,dp));

else
 return false;    

 return dp[i][j];
 }

 //Memoization Top-Down
bool solvetopdown(string &s, string &p,int i,int j,vector<vector<int>> &dp){
    if(i==0 && j==0)
    return true;
    if(i>0 &&  j==0)
    return false;
    if(i==0 && j>0){
        for(int k=1;k<=j;k++){
            if(p[k-1]!='*')
            return false;
        }
        return true;
    }
    if(dp[i][j]!=-1)
    return dp[i][j];
if(s[i-1]==p[j-1] || p[j-1]=='?')
     dp[i][j]= solvetopdown(s,p,i-1,j-1,dp);
else if(p[j-1]=='*')
     dp[i][j] =(solvetopdown(s,p,i,j-1,dp) || solvetopdown(s,p,i-1,j,dp));

else
 return false;    

 return dp[i][j];
 }

bool solvetab(string s, string p){
    vector<vector<int>> dp(s.length()+1,vector<int>(p.length()+1,0));
    dp[0][0]=true;
for(int j=1;j<=p.length();j++){
    bool flag=true;
 for(int k=1;k<=j;k++){
     if(p[k-1]!='*'){
         flag=false;
         break;
     }    
 }
  dp[0][j]=flag;
}

for(int i=1;i<=s.length();i++){
     for(int j=1;j<=p.length();j++){
if(s[i-1]==p[j-1] || p[j-1]=='?')
     dp[i][j]= dp[i-1][j-1];
else if(p[j-1]=='*')
     dp[i][j] =(dp[i-1][j] || dp[i][j-1]);
else
    dp[i][j]= false;    

     }
 }  
    return dp[s.length()][p.length()];
}


    bool isMatch(string s, string p) {
        //bottomup
         //vector<vector<int>> dp(s.length(),vector<int>(p.length(),-1));
         //return solve(s,p,s.size()-1,p.size()-1,dp);
         //topdown
          //vector<vector<int>> dp(s.length()+1,vector<int>(p.length()+1,-1));
          //return solvetopdown(s,p,s.size(),p.size(),dp);
        return solvetab(s,p);
    }
};
