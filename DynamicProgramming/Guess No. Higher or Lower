I pick a number between 1 and n.
You guess a number.
1.If you guess the right number, you win the game.
2.If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.
3.Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.
4.Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.

Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.


class Solution {
public:
int solve(int l,int r){
    if(l>=r)
    return 0;
    int ans=INT_MAX;
    for(int i=l;i<=r;i++){
        ans=min(ans,i+max(solve(l,i-1),solve(i+1,r)));
    }
  return ans;  
}

int solvemem(int l,int r,vector<vector<int>> &dp){
    if(l>=r)
    return 0;
    if(dp[l][r]!=-1)
    return dp[l][r];
    int ans=INT_MAX;
    for(int i=l;i<=r;i++){
        ans=min(ans,i+max(solvemem(l,i-1,dp),solvemem(i+1,r,dp)));
    }
  return dp[l][r]=ans;  
}

int solvetab(int n){
    vector<vector<int>> dp(n+2,vector<int>(n+2,0));
   
    for(int i=n;i>=1;i--){
        for(int j=i;j<=n;j++){
           if(i==j)
           continue;
          int ans=INT_MAX;
          for(int k=i;k<=j;k++){
                ans=min(ans,k+max(dp[i][k-1],dp[k+1][j]));
          }
       dp[i][j]=ans;  
        }
    }
    return dp[1][n];
}
    int getMoneyAmount(int n) {
     //  vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
      // return solvemem(1,n,dp);
      return solvetab(n);
    }
};
