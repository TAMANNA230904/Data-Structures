#include <bits/stdc++.h> 

//recursion
int solve(vector<int> &weight, vector<int> &value,int index,int W){
	//coming from right to left
//base case
if(index==0){
	if(weight[0]<=W)
	return value[0];
	else
	return 0;
}
int include=0;
if(weight[index]<=W)
include=value[index]+solve(weight,value,index-1,W-weight[index]);

int exclude=solve(weight,value,index-1,W);
int ans=max(include,exclude);
return ans;
}

//Memoization
int solveMem(vector<int> &weight, vector<int> &value,int index,int W,vector<vector<int>>& dp){
	//coming from right to left
//base case
if(index==0){
	if(weight[0]<=W)
	return value[0];
	else
	return 0;
}
if(dp[index][W]!=-1)
return dp[index][W];

int include=0;
if(weight[index]<=W)
include=value[index]+solveMem(weight,value,index-1,W-weight[index],dp);

int exclude=solveMem(weight,value,index-1,W,dp);
dp[index][W]=max(include,exclude);
return dp[index][W];
}

//Tabulation
int solveTab(vector<int> &weight, vector<int> &value,int n,int W){
	//step1
	vector<vector<int>> dp(n,vector<int>(W+1,0));
    //step2 Analyse Base Case
	for(int w=weight[0];w<=W;w++){
	if(weight[0]<=W)
	dp[0][w]=value[0];
	else
	dp[0][w]= 0;
	}
//Step3
for(int index=1;index<n;index++){
   for(int w=0;w<=W;w++){
 int include=0;
 if(weight[index]<=w)
 include=value[index]+dp[index-1][w-weight[index]];

 int exclude=dp[index-1][w];
 dp[index][w]= max(include,exclude);
	}
}

 return dp[n-1][W];
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
// Write your code here
// return solve(weight,value,n-1,maxWeight);


// vector<vector<int>> dp(n,vector<int>(maxWeight+1,-1));
// return solveMem(weight,value,n-1,maxWeight,dp);

return solveTab(weight,value,n,maxWeight);
}
