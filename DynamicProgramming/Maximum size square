//Given a binary matrix mat of size n * m, find out the maximum size square sub-matrix with all 1s.


class Solution{
public:
int solve(int i, int j, vector<vector<int>> &mat,int &maxi){
    if(i>=mat.size() || j>=mat[0].size())
    return 0;
    
    int right=solve(i,j+1,mat,maxi);
    int down=solve(i+1,j,mat,maxi);
    int diagonal=solve(i+1,j+1,mat,maxi);
    
    if(mat[i][j]==1){
        int ans=1+min(right,min(down,diagonal));
        maxi=max(maxi,ans);
        return ans;
    }
    else
    return 0;
}

int solveMem(int i, int j, vector<vector<int>> &mat,int &maxi,vector<vector<int>> &dp){
    if(i>=mat.size() || j>=mat[0].size())
    return 0;
    
    if(dp[i][j]!=-1)
    return dp[i][j];
    
    int right=solveMem(i,j+1,mat,maxi,dp);
    int down=solveMem(i+1,j,mat,maxi,dp);
    int diagonal=solveMem(i+1,j+1,mat,maxi,dp);
    
    if(mat[i][j]==1){
        dp[i][j]=1+min(right,min(down,diagonal));
        maxi=max(maxi,dp[i][j]);
        return dp[i][j];
    }
    else
    return dp[i][j]=0;
}


//Tabulation Bottom-up

int solveTab(vector<vector<int>> &mat,int &maxi){
    int row=mat.size();
    int col=mat[0].size();
    
    vector<vector<int>> dp(row+1,vector<int>(col+1,0));
    
    for(int i=row-1;i>=0;i--){
        for(int j=col-1;j>=0;j--){
           int right=dp[i][j+1];
           int down=dp[i+1][j];
           int diagonal=dp[i+1][j+1];
    
            if(mat[i][j]==1){
                dp[i][j]=1+min(right,min(down,diagonal));
                maxi=max(maxi,dp[i][j]);
       
                }
            else{
                dp[i][j]=0;}
        }
    }
    
return dp[0][0];    
   
}


    int maxSquare(int n, int m, vector<vector<int>> mat){
       int maxi=0;
    //   solve(0,0,mat,maxi);
    // vector<vector<int>> dp(n,vector<int>(m,-1));
    // solveMem(0,0,mat,maxi,dp);
    solveTab(mat,maxi);
       return maxi;
    }
};
