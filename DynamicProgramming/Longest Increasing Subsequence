Given an array of integers, find the length of the longest (strictly) increasing subsequence from the given array.

class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    int solve(int n,int a[],int curr,int prev){
        //base case
        if(curr==n)
        return 0;
        
        int take=0;
        if(prev==-1 || a[curr]>a[prev])
         take=1+solve(n,a,curr+1,curr);
        int not_take=solve(n,a,curr+1,prev);
        
        return max(take,not_take);
    }
    int solveMem(int n,int a[],int curr,int prev,vector<vector<int>> &dp){
        //base case
        if(curr==n)
        return 0;
        if(dp[curr][prev+1]!=-1)
        return dp[curr][prev+1];
        
        int take=0;
        if(prev==-1 || a[curr]>a[prev])
         take=1+solveMem(n,a,curr+1,curr,dp);
        int not_take=solveMem(n,a,curr+1,prev,dp);
        
        dp[curr][prev+1] =max(take,not_take);
        return dp[curr][prev+1];
    }
    
    int solvetab(int n,int a[]){
        //T.C=N^2 S.C=N^2
         vector<vector<int>> dp(n+1,vector<int>(n+1,0));
         for(int curr=n-1;curr>=0;curr--){
             for(int prev=curr-1;prev>=-1;prev--){
                  int take=0;
                  if(prev==-1 || a[curr]>a[prev])
                  take=1+dp[curr+1][curr+1];
                  int not_take=dp[curr+1][prev+1];
                  
                  dp[curr][prev+1] =max(take,not_take);
                 
             }
            
         }
         return dp[0][0];
    }
    int solveoptimal(int n,int a[]){
//t.c=O(nlogn) S.C.=O(n);
        if(n==0)
        return 0;
        vector<int> ans;
        ans.push_back(a[0]);
        for(int i=1;i<n;i++){
            if(a[i]>ans.back())
            ans.push_back(a[i]);
            else{
                int index=lower_bound(ans.begin(),ans.end(),a[i])-ans.begin();
                ans[index]=a[i]; 
            }
        }
        return ans.size();
    }
    int longestSubsequence(int n, int a[])
    {
     //return solve(n,a,0,-1);
     // vector<vector<int>> dp(n,vector<int>(n+1,-1));
     // return solveMem(n,a,0,-1,dp);
     // return solvetab(n,a);
     return solveoptimal(n,a);
    }
};
